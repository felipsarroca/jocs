      return (
        <div className={`min-h-screen flex flex-col transition-colors duration-500 ${activeGradient}`}>
          <div className="container mx-auto px-3 py-4 max-w-xl md:max-w-2xl flex-1 w-full">
            <div className="text-center mb-4">
              <h1 className={`text-2xl md:text-xl font-bold mb-2 text-white drop-shadow-lg animate-pulse`}>
                <span className="inline-flex items-center gap-2">
                  <IconZap className="w-7 h-7 md:w-8 md:h-8" />
                  2048 Matem√†tic
                </span>
              </h1>
              <p className={`text-sm md:text-base ${darkMode ? 'text-purple-200' : 'text-white'} font-semibold`}>
                Combina i arriba al 2048!
              </p>
            </div>
            {gameMode === 'menu' && !showRecords && !showInstructions && (
              <div className="space-y-3 animate-fade-in">
                <div className={`${darkMode ? 'bg-gray-800/90' : 'bg-white/90'} backdrop-blur-lg rounded-3xl p-4 md:p-5 shadow-2xl` }>
                  <h2 className={`text-lg md:text-xl font-bold text-center mb-3 ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                    Tria el mode de joc
                  </h2>
                  <div className="space-y-4">
                    <button
                      type="button"
                      onClick={() => startGame('classic')}
                      className="w-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white py-2.5 md:py-3 px-4 rounded-2xl text-sm md:text-base font-bold hover:scale-105 transform transition-all shadow-lg hover:shadow-2xl flex items-center justify-center gap-2.5"
                    >
                      <IconClock className="w-6 h-6 md:w-7 md:h-7" />
                      Mode cl√†ssic
                    </button>
                    <button
                      type="button"
                      onClick={() => startGame('countdown')}
                      className="w-full bg-gradient-to-r from-orange-500 to-red-500 text-white py-2.5 md:py-3 px-4 rounded-2xl text-sm md:text-base font-bold hover:scale-105 transform transition-all shadow-lg hover:shadow-2xl flex items-center justify-center gap-2.5"
                    >
                      <IconZap className="w-6 h-6 md:w-7 md:h-7" />
                      Contrarellotge (3 min)
                    </button>
                    <button
                      type="button"
                      onClick={() => setShowInstructions(true)}
                      className={`w-full ${darkMode ? 'bg-purple-600' : 'bg-purple-500'} text-white py-2 px-4 rounded-2xl text-sm md:text-base font-bold hover:scale-105 transform transition-all`}
                    >
                      ?? Instruccions
                    </button>
                    <button
                      type="button"
                      onClick={() => setShowRecords(true)}
                      className={`w-full ${darkMode ? 'bg-green-600' : 'bg-green-500'} text-white py-2 px-4 rounded-2xl text-sm md:text-base font-bold hover:scale-105 transform transition-all flex items-center justify-center gap-2`}
                    >
                      <IconTrophy className="w-4 h-4 md:w-5 md:h-5" />
                      R√®cords
                    </button>
                  </div>
                </div>
              </div>
            )}
            {showInstructions && (
              <div className={`${darkMode ? 'bg-gray-800/95' : 'bg-white/95'} backdrop-blur-lg rounded-3xl p-4 md:p-5 shadow-2xl animate-fade-in`}>
                <h2 className={`text-lg md:text-xl font-bold text-center mb-3 ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                  <span className="inline-flex items-center gap-2">
                    <IconClock className="w-5 h-5" /> Instruccions
                  </span>
                </h2>
                <div className={`space-y-3 text-sm md:text-base ${darkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                  <p>üéØ <strong>Objectiu:</strong> Combina nombres fins arribar a 2048.</p>
                  <p>??? <strong>Controls:</strong> Utilitza les fletxes del teclat o llisca el dit al m√≤bil.</p>
                  <p>‚ûï <strong>Combinacions:</strong> Quan dues caselles iguals es toquen, es fusionen.</p>
                  <p>‚ö° <strong>Bonus:</strong> Combina en menys de 3 segons per sumar punts extra.</p>
                  <p>üéÆ <strong>Modes:</strong></p>
                  <ul className="ml-6 space-y-2 list-disc">
                    <li>? Cl√†ssic: juga sense l√≠mit de temps.</li>
                    <li>? Contrarellotge: 3 minuts per fer el m√†xim de punts.</li>
                  </ul>
                </div>
                <button
                  type="button"
                  onClick={() => setShowInstructions(false)}
                  className="w-full mt-4 bg-gradient-to-r from-blue-500 to-purple-500 text-white py-2 px-4 rounded-2xl text-sm md:text-base font-bold hover:scale-105 transform transition-all"
                >
                  Tornar
                </button>
              </div>
            )}
            {showRecords && (
              <div className={`${darkMode ? 'bg-gray-800/95' : 'bg-white/95'} backdrop-blur-lg rounded-3xl p-4 md:p-5 shadow-2xl animate-fade-in`}>
                <h2 className={`text-lg md:text-xl font-bold text-center mb-3 ${darkMode ? 'text-white' : 'text-gray-800'} flex items-center justify-center gap-3`}>
                  <IconTrophy className="w-7 h-7 md:w-9 md:h-9 text-yellow-400" />
                  Millors puntuacions
                </h2>
                {records.length === 0 ? (
                  <p className={`text-center text-base md:text-lg ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                    Encara no hi ha r√®cords. Sigues el primer! ??
                  </p>
                ) : (
                  <div className="space-y-2 md:space-y-2.5">
                    {records.map((record, index) => (
                      <div
                        key={`${record.name}-${record.savedAt}`}
                        className={`${darkMode ? 'bg-gray-700' : 'bg-gradient-to-r from-yellow-100 to-orange-100'} p-3 rounded-xl flex justify-between items-center`}
                      >
                        <div className="flex items-center gap-2 md:gap-3">
                          <span className="text-xl font-bold">
                            {SCORE_POSITIONS[index] ?? `${index + 1}.`}
                          </span>
                          <div>
                            <p className={`font-bold text-base ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                              {record.name || 'Jugador'}
                            </p>
                            <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                              {MODE_LABELS[record.mode] ?? 'Partida'}
                            </p>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className={`text-xl font-bold ${darkMode ? 'text-yellow-400' : 'text-orange-600'}`}>
                            {record.score}
                          </p>
                          <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                            {formatTime(record.time)}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                <button
                  type="button"
                  onClick={() => setShowRecords(false)}
                  className="w-full mt-4 bg-gradient-to-r from-blue-500 to-purple-500 text-white py-2 px-4 rounded-2xl text-sm md:text-base font-bold hover:scale-105 transform transition-all"
                >
                  Tornar
                </button>
              </div>
            )}
            
            {gameMode !== 'menu' && !showRecords && !showInstructions && (
              (layoutMode === 'auto' ? isLandscape : layoutMode === 'landscape') ? (
              <div className="landscape-only" style={{ display: layoutMode === 'portrait' ? 'none' : undefined }}>
                <div className="flex items-start gap-3 md:gap-4">
                  <div className="w-40 shrink-0">
                    <div className={`${darkMode ? 'bg-gray-800/90' : 'bg-white/90'} backdrop-blur-lg rounded-2xl p-3 shadow-xl`}>
                      <div className="mb-3">
                        <div className={`${darkMode ? 'bg-gradient-to-r from-yellow-600 to-orange-600' : 'bg-gradient-to-r from-yellow-400 to-orange-400'} text-white px-3 py-1.5 rounded-xl text-center shadow-lg`}>
                          <p className="text-xs font-semibold uppercase tracking-wide">Puntuaci√≥</p>
                          <p className="text-lg md:text-xl font-bold">{score}</p>
                        </div>
                      </div>
                      <div className={`text-center px-3 py-1.5 rounded-xl shadow-lg ${
                        gameMode === 'countdown' && countdown < 30
                          ? 'bg-red-500 text-white animate-pulse'
                          : darkMode
                          ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'
                          : 'bg-gradient-to-r from-blue-400 to-purple-400 text-white'
                      }`}>
                        <p className="text-xs font-semibold uppercase tracking-wide">{gameMode === 'classic' ? 'Temps' : 'Temps restant'}</p>
                        <p className="text-lg md:text-xl font-bold">{formatTime(gameMode === 'classic' ? time : countdown)}</p>
                      </div>
                    </div>
                  </div>
                  <div className="flex-1">
                    <div className={`${darkMode ? 'bg-gray-700/50' : 'bg-white/50'} backdrop-blur-sm p-2.5 md:p-3.5 rounded-3xl shadow-2xl mx-auto`}
                         onTouchStart={handleTouchStart}
                         onTouchEnd={handleTouchEnd}>
                      <div className="grid grid-cols-4 gap-[6px] md:gap-2">
                        {grid.map((row, i) => row.map((cell, j) => (
                          <div key={`${i}-${j}`}
                            className={`aspect-square rounded-2xl flex items-center justify-center text-lg md:text-xl font-bold transition-all duration-300 shadow-lg ${
                              cell === 0
                                ? darkMode
                                  ? 'bg-gray-600/30'
                                  : 'bg-gray-200/50'
                                : `bg-gradient-to-br ${TILE_COLORS[cell] || 'from-emerald-600 to-teal-600'} text-white transform hover:scale-105`
                            }`}
                            style={{ animation: cell !== 0 ? 'pop 0.3s ease-out' : 'none' }}>
                            {cell !== 0 && cell}
                          </div>
                        )))}
                      </div>
                    </div>
                    {message && (
                      <div className="mt-3 bg-gradient-to-r from-pink-500 to-purple-500 text-white text-center py-3 rounded-2xl text-sm md:text-base font-bold animate-bounce shadow-lg">{message}</div>
                    )}
                  <div className="w-40 shrink-0">
                    <div className={`${darkMode ? 'bg-gray-800/90' : 'bg-white/90'} backdrop-blur-lg rounded-2xl p-3 shadow-xl flex flex-col gap-2`}>
                      <button type="button" onClick={handleReturnToMenu} className={`${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} px-3 py-1.5 rounded-xl font-semibold transition-all text-sm`}>Men√∫</button>
                      <button type="button" onClick={initializeGrid} className="bg-gradient-to-r from-green-500 to-emerald-500 text-white px-3 py-1.5 rounded-xl font-semibold hover:scale-105 transition-all text-sm flex items-center justify-center gap-2"><IconRefreshCw className="w-4 h-4"/>Reinicia</button>
                      <button type="button" onClick={() => setDarkMode(v=>!v)} className={`${darkMode ? 'bg-yellow-500 hover:bg-yellow-400' : 'bg-indigo-600 hover:bg-indigo-700'} text-white py-2 px-3 rounded-xl font-semibold transition-all text-sm flex items-center justify-center gap-2`}><IconPalette className="w-4 h-4"/>Tema</button>
                      <button type="button" onClick={cycleLayoutMode} className={`${darkMode ? 'bg-purple-600 hover:bg-purple-500' : 'bg-purple-500 hover:bg-purple-600'} text-white py-2 px-3 rounded-xl font-semibold transition-all text-sm flex items-center justify-center gap-2`}><IconLayout className="w-4 h-4"/>Vista: {layoutMode === 'auto' ? 'Auto' : layoutMode === 'portrait' ? 'Vertical' : 'Horitz.'}</button>
                    </div>
                  </div>
                </div>
              </div>
              ) : (
              <div className="portrait-only" style={{ display: (layoutMode === 'landscape') ? 'none' : undefined }}>
                <div className="space-y-4">
                  <div className={`${darkMode ? 'bg-gray-800/90' : 'bg-white/90'} backdrop-blur-lg rounded-2xl p-4 md:p-5 shadow-xl`}>
                    <div className="flex justify-between items-center mb-4 gap-4">
                      <div className={`${darkMode ? 'bg-gradient-to-r from-yellow-600 to-orange-600' : 'bg-gradient-to-r from-yellow-400 to-orange-400'} text-white px-3.5 py-2 md:px-4.5 md:py-2 rounded-xl text-center shadow-lg`}>
                        <p className="text-sm font-semibold uppercase tracking-wide">Puntuaci√≥</p>
                        <p className="text-lg md:text-xl font-bold">{score}</p>
                      </div>
                      <div
                        className={`text-center px-3.5 py-2 md:px-4.5 md:py-2 rounded-xl shadow-lg ${
                          gameMode === 'countdown' && countdown < 30
                            ? 'bg-red-500 text-white animate-pulse'
                            : darkMode
                            ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'
                            : 'bg-gradient-to-r from-blue-400 to-purple-400 text-white'
                        }`}
                      >
                        <p className="text-sm font-semibold uppercase tracking-wide">
                          {gameMode === 'classic' ? 'Temps' : 'Temps restant'}
                        </p>
                        <p className="text-lg md:text-xl font-bold">
                          {formatTime(gameMode === 'classic' ? time : countdown)}
                        </p>
                      </div>
                    </div>
                    <div className="flex gap-2 items-center">
                      <button
                        type="button"
                        onClick={handleReturnToMenu}
                        className={`${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} px-3 py-1.5 rounded-xl font-semibold transition-all flex items-center justify-center gap-2 text-sm md:text-base whitespace-nowrap`}
                      >
                        Men√∫
                      </button>
                      <button
                        type="button"
                        onClick={initializeGrid}
                        className="bg-gradient-to-r from-green-500 to-emerald-500 text-white px-3 py-1.5 rounded-xl font-semibold hover:scale-105 transition-all flex items-center justify-center gap-2 text-sm md:text-base whitespace-nowrap"
                      >
                        <IconRefreshCw className="w-5 h-5" />
                        Reinicia
                      </button>
                      <button
                        type="button"
                        onClick={() => setDarkMode((value) => !value)}
                        className={`${darkMode ? 'bg-yellow-500 hover:bg-yellow-400' : 'bg-indigo-600 hover:bg-indigo-700'} text-white py-2 px-3 md:px-3.5 rounded-xl font-semibold transition-all`}
                      >
                        <IconPalette className="w-5 h-5" />
                      </button>
                      <button
                        type="button"
                        onClick={cycleLayoutMode}
                        className={`${darkMode ? 'bg-purple-600 hover:bg-purple-500' : 'bg-purple-500 hover:bg-purple-600'} text-white py-2 px-3 rounded-xl font-semibold transition-all flex items-center gap-2 text-sm md:text-base`}
                      >
                        <IconLayout className="w-5 h-5" />
                        Vista: {layoutMode === 'auto' ? 'Auto' : layoutMode === 'portrait' ? 'Vertical' : 'Horitz.'}
                      </button>
                    </div>
                  </div>
                  <div
                    className={`${darkMode ? 'bg-gray-700/50' : 'bg-white/50'} backdrop-blur-sm p-2.5 md:p-3.5 rounded-3xl shadow-2xl md:w-[65%] mx-auto`}
                    onTouchStart={handleTouchStart}
                    onTouchEnd={handleTouchEnd}
                  >
                    <div className="grid grid-cols-4 gap-[6px] md:gap-2">
                      {grid.map((row, i) =>
                        row.map((cell, j) => (
                          <div
                            key={`${i}-${j}`}
                            className={`aspect-square rounded-2xl flex items-center justify-center text-lg md:text-xl font-bold transition-all duration-300 shadow-lg ${
                              cell === 0
                                ? darkMode
                                  ? 'bg-gray-600/30'
                                  : 'bg-gray-200/50'
                                : `bg-gradient-to-br ${TILE_COLORS[cell] || 'from-emerald-600 to-teal-600'} text-white transform hover:scale-105`
                            }`}
                            style={{ animation: cell !== 0 ? 'pop 0.3s ease-out' : 'none' }}
                          >
                            {cell !== 0 && cell}
                          </div>
                        ))
                      )}
                    </div>
                  </div>
                  {(gameOver || won) && (
                    <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 animate-fade-in px-4">
                      <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-3xl p-4 md:p-5 max-w-md w-full text-center shadow-2xl space-y-3.5`}>
                        <div className="text-4xl md:text-5xl">{won ? 'üèÜ' : 'üí•'}</div>
                        <h2 className={`text-2xl md:text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                          {won ? 'Has guanyat!' : 'Partida acabada'}
                        </h2>
                        <p className={`text-lg md:text-xl ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                          Puntuaci√≥ final: <span className="font-bold text-orange-500">{score}</span>
                        </p>
                        <input
                          ref={nameInputRef}
                          type="text"
                          placeholder="El teu nom"
                          maxLength={15}
                          value={playerName}
                          onChange={(event) => setPlayerName(event.target.value)}
                          onKeyDown={(event) => {
                            if (event.key === 'Enter') {
                              event.preventDefault();
                              handleSaveAndExit();
                            }
                          }}
                          className={`w-full ${darkMode ? 'bg-gray-700 text-white' : 'bg-gray-100'} px-3 py-2 rounded-xl text-center text-base font-semibold outline-none focus:ring-2 focus:ring-purple-400`}
                        />
                        <div className="space-y-3">
                          <button
                            type="button"
                            onClick={handleSaveAndExit}
                            className="w-full bg-gradient-to-r from-green-500 to-emerald-500 text-white py-2 px-4 rounded-xl text-sm md:text-base font-bold hover:scale-105 transition-all"
                          >
                            ?? Guardar i tornar
                          </button>
                          <button
                            type="button"
                            onClick={initializeGrid}
                            className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white py-2 px-4 rounded-xl text-sm md:text-base font-bold hover:scale-105 transition-all"
                          >
                            ?? Jugar de nou
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                {message && (
                  <div className="mt-3 bg-gradient-to-r from-pink-500 to-purple-500 text-white text-center py-3 rounded-2xl text-sm md:text-base font-bold animate-bounce shadow-lg">
                    {message}
                  </div>
                )}
              </div>
            )}
          </div>
          <footer className="px-4 pb-4 text-center text-white/85 space-y-1">
            <p className="text-xs md:text-sm">Aplicaci√≥ creada per Felip Sarroca amb l'assist√®ncia de la IA</p>
            <div className="flex items-center justify-center gap-2 text-[10px] md:text-xs text-white/80">
              <span>Obra sota llic√®ncia</span>
              <img src="./CC_BY-NC-SA.svg" alt="Icona llic√®ncia CC-BY-NC-SA" className="h-5 w-auto" />
              <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.ca" target="_blank" rel="noopener noreferrer" className="underline hover:text-white">CC-BY-NC-SA 4.0</a>
            </div>
          </footer>
        </div>
      );
    }